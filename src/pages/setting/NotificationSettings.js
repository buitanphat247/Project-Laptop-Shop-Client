import React, { useState, useEffect, useCallback } from 'react';
import { Card, Form, Switch, Button, message, Divider, Space, Skeleton, Alert } from 'antd';
import {
    BellOutlined,
    MailOutlined,
    MessageOutlined,
    MobileOutlined,
    SoundOutlined,
    DesktopOutlined,
    ShoppingCartOutlined,
    UserOutlined,
    SettingOutlined
} from '@ant-design/icons';

/**
 * üöß NOTIFICATION SETTINGS PAGE - UNDER DEVELOPMENT üöß
 * 
 * ‚ö†Ô∏è  WARNING: This is a demo UI for development purposes only!
 * ‚ö†Ô∏è  DO NOT modify this file unless you're working on notification features
 * ‚ö†Ô∏è  This page contains demo data and mock functionality
 * 
 * Features:
 * - Email notification settings
 * - SMS notification settings  
 * - Push notification settings
 * - General notification preferences
 * - Mock API integration with fallback data
 * - Loading states and form validation
 * 
 * @author: Development Team
 * @status: In Development
 * @version: 1.0.0
 */

const NotificationSettings = ({ userInfo, onUpdate }) => {
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [notifications, setNotifications] = useState(null);
    const [skeletonLoading, setSkeletonLoading] = useState(true);
    const DEMO_LOCKED = true; // UI demo lock: show-only, disable all interactions

    // Fetch user notification preferences
    const fetchNotificationSettings = useCallback(async () => {
        if (!userInfo?.id) return;

        try {
            setLoading(true);
            setSkeletonLoading(true);
            // Simulate API call - replace with actual API
            await new Promise(resolve => setTimeout(resolve, 1000));

            // Mock notification settings
            const mockSettings = {
                email: {
                    orderUpdates: true,
                    promotions: false,
                    newsletter: true,
                    security: true,
                },
                sms: {
                    orderUpdates: true,
                    promotions: false,
                    security: true,
                },
                push: {
                    orderUpdates: true,
                    promotions: true,
                    security: true,
                    general: false,
                },
                general: {
                    sound: true,
                    vibration: true,
                    doNotDisturb: false,
                }
            };

            setNotifications(mockSettings);
            form.setFieldsValue({
                // Email notifications
                emailOrderUpdates: mockSettings.email.orderUpdates,
                emailPromotions: mockSettings.email.promotions,
                emailNewsletter: mockSettings.email.newsletter,
                emailSecurity: mockSettings.email.security,

                // SMS notifications
                smsOrderUpdates: mockSettings.sms.orderUpdates,
                smsPromotions: mockSettings.sms.promotions,
                smsSecurity: mockSettings.sms.security,

                // Push notifications
                pushOrderUpdates: mockSettings.push.orderUpdates,
                pushPromotions: mockSettings.push.promotions,
                pushSecurity: mockSettings.push.security,
                pushGeneral: mockSettings.push.general,

                // General settings
                sound: mockSettings.general.sound,
                vibration: mockSettings.general.vibration,
                doNotDisturb: mockSettings.general.doNotDisturb,
            });

        } catch (error) {
            message.warning('Kh√¥ng th·ªÉ t·∫£i c√†i ƒë·∫∑t th√¥ng b√°o, s·ª≠ d·ª•ng c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh');
        } finally {
            setLoading(false);
            setTimeout(() => setSkeletonLoading(false), 250);
        }
    }, [userInfo?.id, form]);

    // Handle form submission
    const handleSubmit = async (values) => {
        setSaving(true);
        try {
            console.log('üöÄ Saving notification settings:', values);

            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 250));

            // Update local state
            const updatedSettings = {
                email: {
                    orderUpdates: values.emailOrderUpdates,
                    promotions: values.emailPromotions,
                    newsletter: values.emailNewsletter,
                    security: values.emailSecurity,
                },
                sms: {
                    orderUpdates: values.smsOrderUpdates,
                    promotions: values.smsPromotions,
                    security: values.smsSecurity,
                },
                push: {
                    orderUpdates: values.pushOrderUpdates,
                    promotions: values.pushPromotions,
                    security: values.pushSecurity,
                    general: values.pushGeneral,
                },
                general: {
                    sound: values.sound,
                    vibration: values.vibration,
                    doNotDisturb: values.doNotDisturb,
                }
            };

            setNotifications(updatedSettings);

            // Update parent component if needed
            if (onUpdate) {
                onUpdate({ notificationSettings: updatedSettings });
            }

            console.log('‚úÖ Notification settings saved successfully:', updatedSettings);
            message.success('C√†i ƒë·∫∑t th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
        } catch (error) {
            console.error('‚ùå Error saving notification settings:', error);
            message.error('Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } finally {
            setSaving(false);
        }
    };

    // Initialize data
    useEffect(() => {
        setSkeletonLoading(true);
        fetchNotificationSettings();
        // eslint-disable-next-line
    }, [userInfo?.id]);

    if (skeletonLoading) {
        return (
            <Card title="C√†i ƒë·∫∑t th√¥ng b√°o" className="shadow-sm">
                <div className="flex flex-col gap-6">
                    <Skeleton.Input style={{ width: 200, marginBottom: 24 }} active />
                    {[1, 2, 3, 4].map(i => (
                        <Card size="small" className="mb-4" key={i}>
                            <Skeleton active paragraph={{ rows: 3 }} />
                        </Card>
                    ))}
                    <div className="mt-6 flex gap-3">
                        <Skeleton.Button active style={{ width: 140 }} />
                        <Skeleton.Button active style={{ width: 100 }} />
                    </div>
                </div>
            </Card>
        );
    }

    return (
        <div className="space-y-6">
            {DEMO_LOCKED && (
                <Alert
                    message="Trang C√†i ƒë·∫∑t th√¥ng b√°o ƒëang ph√°t tri·ªÉn"
                    description="ƒê√¢y l√† UI demo ch·ªâ ƒë·ªÉ tr√¨nh b√†y. Vui l√≤ng kh√¥ng thao t√°c."
                    type="warning"
                    showIcon
                    banner
                />
            )}

            <div className={DEMO_LOCKED ? 'relative' : ''}>
                <div className={DEMO_LOCKED ? 'pointer-events-none opacity-60 select-none' : ''}>
                    <Card
                        title={
                            <div className="flex items-center gap-2">
                                <BellOutlined />
                                <span>C√†i ƒë·∫∑t th√¥ng b√°o</span>
                            </div>
                        }
                        className="shadow-sm"
                    >
                        {/* User Info Display */}
                        {userInfo && (
                            <div className="mb-6 p-4 bg-blue-50 rounded-lg">
                                <h4 className="font-medium text-blue-900 mb-2">Th√¥ng tin t√†i kho·∫£n</h4>
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                    <div>
                                        <span className="text-blue-700">Email:</span>
                                        <div className="font-medium">{userInfo.email || 'Ch∆∞a c·∫≠p nh·∫≠t'}</div>
                                    </div>
                                    <div>
                                        <span className="text-blue-700">ƒêi·ªán tho·∫°i:</span>
                                        <div className="font-medium">{userInfo.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}</div>
                                    </div>
                                    <div>
                                        <span className="text-blue-700">Vai tr√≤:</span>
                                        <div className="font-medium">{userInfo.role?.toUpperCase() || 'USER'}</div>
                                    </div>
                                </div>
                            </div>
                        )}

            <Form
                form={form}
                layout="vertical"
                onFinish={handleSubmit}
            >
                {/* Email Notifications */}
                <Card size="small" className="mb-4" title={
                    <div className="flex items-center gap-2 text-base">
                        <MailOutlined className="text-blue-500" />
                        <span>Th√¥ng b√°o Email</span>
                    </div>
                }>
                    <div className="space-y-4">
                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">C·∫≠p nh·∫≠t ƒë∆°n h√†ng</h4>
                                <p className="text-sm text-gray-500">Nh·∫≠n th√¥ng b√°o v·ªÅ tr·∫°ng th√°i ƒë∆°n h√†ng</p>
                            </div>
                            <Form.Item name="emailOrderUpdates" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">Khuy·∫øn m√£i & ∆Øu ƒë√£i</h4>
                                <p className="text-sm text-gray-500">Nh·∫≠n th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i</p>
                            </div>
                            <Form.Item name="emailPromotions" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">Newsletter</h4>
                                <p className="text-sm text-gray-500">Nh·∫≠n b·∫£n tin h√†ng tu·∫ßn v·ªÅ s·∫£n ph·∫©m m·ªõi</p>
                            </div>
                            <Form.Item name="emailNewsletter" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">B·∫£o m·∫≠t</h4>
                                <p className="text-sm text-gray-500">Th√¥ng b√°o v·ªÅ ho·∫°t ƒë·ªông b·∫£o m·∫≠t t√†i kho·∫£n</p>
                            </div>
                            <Form.Item name="emailSecurity" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>
                    </div>
                </Card>

                {/* SMS Notifications */}
                <Card size="small" className="mb-4" title={
                    <div className="flex items-center gap-2 text-base">
                        <MessageOutlined className="text-green-500" />
                        <span>Th√¥ng b√°o SMS</span>
                    </div>
                }>
                    <div className="space-y-4">
                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">C·∫≠p nh·∫≠t ƒë∆°n h√†ng</h4>
                                <p className="text-sm text-gray-500">SMS v·ªÅ tr·∫°ng th√°i giao h√†ng</p>
                            </div>
                            <Form.Item name="smsOrderUpdates" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">Khuy·∫øn m√£i</h4>
                                <p className="text-sm text-gray-500">SMS v·ªÅ c√°c ∆∞u ƒë√£i ƒë·∫∑c bi·ªát</p>
                            </div>
                            <Form.Item name="smsPromotions" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">B·∫£o m·∫≠t</h4>
                                <p className="text-sm text-gray-500">SMS x√°c th·ª±c v√† c·∫£nh b√°o b·∫£o m·∫≠t</p>
                            </div>
                            <Form.Item name="smsSecurity" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>
                    </div>
                </Card>

                {/* Push Notifications */}
                <Card size="small" className="mb-4" title={
                    <div className="flex items-center gap-2 text-base">
                        <MobileOutlined className="text-purple-500" />
                        <span>Th√¥ng b√°o Push</span>
                    </div>
                }>
                    <div className="space-y-4">
                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">C·∫≠p nh·∫≠t ƒë∆°n h√†ng</h4>
                                <p className="text-sm text-gray-500">Th√¥ng b√°o push v·ªÅ ƒë∆°n h√†ng</p>
                            </div>
                            <Form.Item name="pushOrderUpdates" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">Khuy·∫øn m√£i</h4>
                                <p className="text-sm text-gray-500">Th√¥ng b√°o v·ªÅ ∆∞u ƒë√£i v√† sale</p>
                            </div>
                            <Form.Item name="pushPromotions" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">B·∫£o m·∫≠t</h4>
                                <p className="text-sm text-gray-500">C·∫£nh b√°o b·∫£o m·∫≠t quan tr·ªçng</p>
                            </div>
                            <Form.Item name="pushSecurity" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">Th√¥ng b√°o chung</h4>
                                <p className="text-sm text-gray-500">Tin t·ª©c v√† c·∫≠p nh·∫≠t h·ªá th·ªëng</p>
                            </div>
                            <Form.Item name="pushGeneral" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>
                    </div>
                </Card>

                {/* General Settings */}
                <Card size="small" className="mb-6" title={
                    <div className="flex items-center gap-2 text-base">
                        <SettingOutlined className="text-gray-500" />
                        <span>C√†i ƒë·∫∑t chung</span>
                    </div>
                }>
                    <div className="space-y-4">
                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">√Çm thanh th√¥ng b√°o</h4>
                                <p className="text-sm text-gray-500">Ph√°t √¢m thanh khi c√≥ th√¥ng b√°o</p>
                            </div>
                            <Form.Item name="sound" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">Rung</h4>
                                <p className="text-sm text-gray-500">Rung thi·∫øt b·ªã khi c√≥ th√¥ng b√°o</p>
                            </div>
                            <Form.Item name="vibration" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>

                        <div className="flex justify-between items-center">
                            <div>
                                <h4 className="font-medium">Kh√¥ng l√†m phi·ªÅn</h4>
                                <p className="text-sm text-gray-500">T·∫Øt th√¥ng b√°o trong gi·ªù ngh·ªâ (22:00 - 7:00)</p>
                            </div>
                            <Form.Item name="doNotDisturb" valuePropName="checked" className="mb-0">
                                <Switch />
                            </Form.Item>
                        </div>
                    </div>
                </Card>

                {/* Current Settings Summary */}
                {notifications && (
                    <Card size="small" className="mb-6 bg-gray-50">
                        <h4 className="font-medium text-gray-700 mb-3">T√≥m t·∫Øt c√†i ƒë·∫∑t hi·ªán t·∫°i:</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                            <div>
                                <span className="text-gray-600">Email:</span>
                                <div className="font-medium">
                                    {Object.values(notifications.email).filter(Boolean).length}/4 lo·∫°i ƒë∆∞·ª£c b·∫≠t
                                </div>
                            </div>
                            <div>
                                <span className="text-gray-600">SMS:</span>
                                <div className="font-medium">
                                    {Object.values(notifications.sms).filter(Boolean).length}/3 lo·∫°i ƒë∆∞·ª£c b·∫≠t
                                </div>
                            </div>
                            <div>
                                <span className="text-gray-600">Push:</span>
                                <div className="font-medium">
                                    {Object.values(notifications.push).filter(Boolean).length}/4 lo·∫°i ƒë∆∞·ª£c b·∫≠t
                                </div>
                            </div>
                            <div>
                                <span className="text-gray-600">Chung:</span>
                                <div className="font-medium">
                                    {Object.values(notifications.general).filter(Boolean).length}/3 t√≠nh nƒÉng ƒë∆∞·ª£c b·∫≠t
                                </div>
                            </div>
                        </div>
                    </Card>
                )}

                {/* Action Buttons */}
                <Form.Item>
                    <Space>
                        <Button
                            type="primary"
                            htmlType="submit"
                            loading={saving}
                            size="large"
                            icon={<SettingOutlined />}
                        >
                            {saving ? 'ƒêang l∆∞u...' : 'L∆∞u c√†i ƒë·∫∑t'}
                        </Button>

                        <Button
                            onClick={() => {
                                form.resetFields();
                                fetchNotificationSettings();
                            }}
                            size="large"
                        >
                            Kh√¥i ph·ª•c
                        </Button>
                    </Space>
                </Form.Item>
            </Form>
        </Card>
                </div>
                {/* {DEMO_LOCKED && (
                    <div className="absolute inset-0 z-10 flex items-center justify-center">
                        <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 px-4 py-2 rounded-md shadow">
                            UI demo ƒëang ph√°t tri·ªÉn ‚Äî Ch·ªâ ƒë·ªÉ tr√¨nh b√†y, vui l√≤ng kh√¥ng thao t√°c
                        </div>
                    </div>
                )} */}
            </div>
        </div>
    );
};

export default NotificationSettings;